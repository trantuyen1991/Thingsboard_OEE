{
  "entityType" : "TB_RESOURCE",
  "entity" : {
    "data" : "",
    "descriptor" : null,
    "etag" : "54f206453ead085cc56fd43aca6cebec87467a5b536acf65ccb564fb600fbe5b",
    "externalId" : null,
    "fileName" : "oee_uitils.js",
    "id" : {
      "entityType" : "TB_RESOURCE",
      "id" : "d6058cf0-ab40-11f0-a185-e3775a54d72e"
    },
    "link" : "/api/resource/js_module/tenant/oee_uitils.js",
    "name" : "oee_utils",
    "preview" : null,
    "public" : false,
    "publicLink" : null,
    "publicResourceKey" : null,
    "resourceKey" : "oee_uitils.js",
    "resourceSubType" : "MODULE",
    "resourceType" : "JS_MODULE",
    "title" : "oee_utils"
  }
}